const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = "https://vqwgnvrhcaosnjczuwth.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZxd2dudnJoY2Fvc25qY3p1d3RoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE5ODc0MjQsImV4cCI6MjA2NzU2MzQyNH0.3R5XkNZGMLmLUI1A5iExLnhsIyiwIyz0Azu7eInQHq4";

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDeleteEvent() {
  console.log('üîç [DEBUG] ===== TEST SUPPRESSION √âV√âNEMENT =====');
  
  try {
    // R√©cup√©rer le premier √©v√©nement pour le test
    const { data: events, error: fetchError } = await supabase
      .from('scheduled_events')
      .select('*')
      .limit(1);

    if (fetchError) {
      console.error('‚ùå [DEBUG] Erreur lors de la r√©cup√©ration:', fetchError);
      return;
    }

    if (!events || events.length === 0) {
      console.log('‚ùå [DEBUG] Aucun √©v√©nement trouv√© pour le test');
      return;
    }

    const eventToDelete = events[0];
    console.log('üîç [DEBUG] √âv√©nement √† supprimer:', eventToDelete);

    // Supprimer d'abord les t√¢ches li√©es
    console.log('üîç [DEBUG] Suppression des t√¢ches li√©es...');
    const { error: tasksError } = await supabase
      .from('scheduled_tasks')
      .delete()
      .eq('recurring_event_id', eventToDelete.id);

    if (tasksError) {
      console.warn('‚ö†Ô∏è [DEBUG] Erreur lors de la suppression des t√¢ches li√©es:', tasksError);
    } else {
      console.log('‚úÖ [DEBUG] T√¢ches li√©es supprim√©es (ou aucune trouv√©e)');
    }

    // Supprimer l'√©v√©nement
    console.log('üîç [DEBUG] Suppression de l\'√©v√©nement...');
    const { error: deleteError } = await supabase
      .from('scheduled_events')
      .delete()
      .eq('id', eventToDelete.id);

    if (deleteError) {
      console.error('‚ùå [DEBUG] Erreur lors de la suppression:', deleteError);
      return;
    }

    console.log('‚úÖ [DEBUG] √âv√©nement supprim√© avec succ√®s');

    // V√©rifier que l'√©v√©nement a bien √©t√© supprim√©
    const { data: remainingEvents, error: checkError } = await supabase
      .from('scheduled_events')
      .select('*')
      .eq('id', eventToDelete.id);

    if (checkError) {
      console.error('‚ùå [DEBUG] Erreur lors de la v√©rification:', checkError);
      return;
    }

    if (remainingEvents.length === 0) {
      console.log('‚úÖ [DEBUG] V√©rification r√©ussie: l\'√©v√©nement a bien √©t√© supprim√©');
    } else {
      console.log('‚ùå [DEBUG] L\'√©v√©nement existe encore:', remainingEvents);
    }

  } catch (error) {
    console.error('‚ùå [DEBUG] Erreur g√©n√©rale:', error);
  }
}

testDeleteEvent(); 